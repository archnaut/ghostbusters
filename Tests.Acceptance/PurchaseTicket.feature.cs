// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.Acceptance
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PurchaseTicketFeature : Xunit.IClassFixture<PurchaseTicketFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PurchaseTicket.feature"
#line hidden
        
        public PurchaseTicketFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PurchaseTicket", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(PurchaseTicketFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Purchase Single Ticket for Current Event")]
        [Xunit.TraitAttribute("FeatureTitle", "PurchaseTicket")]
        [Xunit.TraitAttribute("Description", "Purchase Single Ticket for Current Event")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void PurchaseSingleTicketForCurrentEvent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Purchase Single Ticket for Current Event", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "On Sale Date",
                        "Doors Open Date",
                        "Event Start Date",
                        "Event End Date"});
            table1.AddRow(new string[] {
                        "1",
                        "Current Event",
                        "30 days ago",
                        "4 days 13 hours from now",
                        "5 days 14 hours from now",
                        "5 days 17 hours from now"});
#line 8
 testRunner.Given("the following event(s) exist", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Event ID",
                        "Name",
                        "Price",
                        "Quantity Available"});
            table2.AddRow(new string[] {
                        "1",
                        "General Admission",
                        "10",
                        "500"});
            table2.AddRow(new string[] {
                        "1",
                        "VIP",
                        "30",
                        "100"});
#line 11
 testRunner.And("the following tickets are available", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "Event ID",
                        "1"});
            table3.AddRow(new string[] {
                        "First Name",
                        "Billy-Ray"});
            table3.AddRow(new string[] {
                        "Last Name",
                        "Cowfarmer"});
            table3.AddRow(new string[] {
                        "Credit Card Number",
                        "0000-0000-0000-0000"});
            table3.AddRow(new string[] {
                        "Security Code",
                        "000"});
            table3.AddRow(new string[] {
                        "Expiration Month",
                        "01"});
            table3.AddRow(new string[] {
                        "Expiration Year",
                        "2018"});
#line 15
 testRunner.When("I submit the following order to \"http://localhost:53735/api/Orders\"", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Ticket ID",
                        "Quantity"});
            table4.AddRow(new string[] {
                        "1",
                        "1"});
#line 24
 testRunner.And("the order includes the following line items", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "Order ID",
                        "1"});
            table5.AddRow(new string[] {
                        "First Name",
                        "Billy-Ray"});
            table5.AddRow(new string[] {
                        "Last Name",
                        "Cowfarmer"});
            table5.AddRow(new string[] {
                        "Purchase Date",
                        "Today"});
            table5.AddRow(new string[] {
                        "Amount Paid",
                        "10.975"});
#line 27
 testRunner.Then("I should receive the following receipt", ((string)(null)), table5, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Ticket ID",
                        "Name",
                        "Barcode",
                        "Ticket Amout Paid",
                        "Sales Tax Paid"});
            table6.AddRow(new string[] {
                        "1",
                        "General Admission",
                        "1",
                        "10",
                        "0.975"});
#line 34
 testRunner.And("receipt includes the following line items", ((string)(null)), table6, "And ");
#line 37
 testRunner.And("the quantity available of ticket with ID 1 should be 499", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Past Event")]
        [Xunit.TraitAttribute("FeatureTitle", "PurchaseTicket")]
        [Xunit.TraitAttribute("Description", "Past Event")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void PastEvent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Past Event", new string[] {
                        "mytag"});
#line 40
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "On Sale Date",
                        "Doors Open Date",
                        "Event Start Date",
                        "Event End Date"});
            table7.AddRow(new string[] {
                        "1",
                        "Past Event",
                        "30 days ago",
                        "5 days 17 hours ago",
                        "5 days 14 hours ago",
                        "4 days 13 hours ago"});
#line 41
 testRunner.Given("the following event(s) exist", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Event ID",
                        "Name",
                        "Price",
                        "Quantity Available"});
            table8.AddRow(new string[] {
                        "1",
                        "General Admission",
                        "10",
                        "500"});
            table8.AddRow(new string[] {
                        "1",
                        "VIP",
                        "30",
                        "100"});
#line 44
 testRunner.And("the following tickets are available", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "Event ID",
                        "1"});
            table9.AddRow(new string[] {
                        "First Name",
                        "Billy-Ray"});
            table9.AddRow(new string[] {
                        "Last Name",
                        "Cowfarmer"});
            table9.AddRow(new string[] {
                        "Credit Card Number",
                        "0000-0000-0000-0000"});
            table9.AddRow(new string[] {
                        "Security Code",
                        "000"});
            table9.AddRow(new string[] {
                        "Expiration Month",
                        "01"});
            table9.AddRow(new string[] {
                        "Expiration Year",
                        "2018"});
#line 48
 testRunner.When("I submit the following order to \"http://localhost:53735/api/Orders\"", ((string)(null)), table9, "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Ticket ID",
                        "Quantity"});
            table10.AddRow(new string[] {
                        "1",
                        "1"});
#line 57
 testRunner.And("the order includes the following line items", ((string)(null)), table10, "And ");
#line 60
 testRunner.Then("the response status code is 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 61
 testRunner.And("I should receive the message \"Event Passed: Cannot purchase tickets for events th" +
                    "at have already passed.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Sold Out Event")]
        [Xunit.TraitAttribute("FeatureTitle", "PurchaseTicket")]
        [Xunit.TraitAttribute("Description", "Sold Out Event")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void SoldOutEvent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sold Out Event", new string[] {
                        "mytag"});
#line 64
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "On Sale Date",
                        "Doors Open Date",
                        "Event Start Date",
                        "Event End Date"});
            table11.AddRow(new string[] {
                        "1",
                        "Current Event",
                        "30 days ago",
                        "4 days 13 hours from now",
                        "5 days 14 hours from now",
                        "5 days 17 hours from now"});
#line 65
 testRunner.Given("the following event(s) exist", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Event ID",
                        "Name",
                        "Price",
                        "Quantity Available"});
            table12.AddRow(new string[] {
                        "1",
                        "General Admission",
                        "10",
                        "0"});
            table12.AddRow(new string[] {
                        "1",
                        "VIP",
                        "30",
                        "100"});
#line 68
 testRunner.And("the following tickets are available", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "Event ID",
                        "1"});
            table13.AddRow(new string[] {
                        "First Name",
                        "Billy-Ray"});
            table13.AddRow(new string[] {
                        "Last Name",
                        "Cowfarmer"});
            table13.AddRow(new string[] {
                        "Credit Card Number",
                        "0000-0000-0000-0000"});
            table13.AddRow(new string[] {
                        "Security Code",
                        "000"});
            table13.AddRow(new string[] {
                        "Expiration Month",
                        "01"});
            table13.AddRow(new string[] {
                        "Expiration Year",
                        "2018"});
#line 72
 testRunner.When("I submit the following order to \"http://localhost:53735/api/Orders\"", ((string)(null)), table13, "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Ticket ID",
                        "Quantity"});
            table14.AddRow(new string[] {
                        "1",
                        "1"});
#line 81
 testRunner.And("the order includes the following line items", ((string)(null)), table14, "And ");
#line 84
 testRunner.Then("the response status code is 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 85
 testRunner.And("I should receive the message \"Sold Out: Insufficient tickets available to satisfy" +
                    " your request.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PurchaseTicketFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PurchaseTicketFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
